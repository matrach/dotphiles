#
# dotphiles : https://github.com/dotphiles/dotphiles
#
# Setup tmux
#
# Authors:
#   Ben O'Hara <bohara@gmail.com>
#

#unbind s
# Set that stupid Esc-Wait off, so VI works again
set-option -sg  escape-time 0
set-option -g   terminal-overrides 'xterm*:smcup@:rmcup@'

# Alt+x to copy selection to clipboard (Linux)
bind-key -n M-c run-shell "tmux show-buffer | xclip -i -sel clip"

# Make clipboard work inside vim (OSX)
if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'

# Clipboard (OSX)
if-shell 'test "$(uname)" = "Darwin"' 'bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
if-shell 'test "$(uname)" = "Darwin"' 'bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"'

# 0 is too far from ` ;)
set-option -g base-index 1
set-window-option -g pane-base-index 1

set-option -g default-command $SHELL
set-option -g default-shell $SHELL

set-option -g prefix C-a
bind-key C-a last-window
bind-key a send-prefix

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on
set-option -g set-titles-string '[#S:#I #h] #W'

# New window is in horizontal split
bind-key -n M-t new-window \; split-window -h \; select-pane -t :.+
bind-key -n M-n new-window \; select-pane -t :.+
bind-key -n M-y new-window 'top'
# Window switching
bind-key -n M-. next-window
bind-key -n M-, previous-window

# Vertical window split
bind-key -n M-u split-window
# Horizontal window split
bind-key -n M-i split-window -h
bind-key -n M-h split-window -h

# Next tab
#bind-key -n C-Tab select-pane -t :.+
# Resize tabs
bind-key -n M-w resize-pane -U 5
bind-key -n M-s resize-pane -D 5
bind-key -n M-a resize-pane -L 5
bind-key -n M-d resize-pane -R 5
# Switch windows
bind-key -n M-up select-pane -U
bind-key -n M-down select-pane -D
bind-key -n M-left select-pane -L
bind-key -n M-right select-pane -R

bind-key -n M-i select-pane -U
bind-key -n M-k select-pane -D
bind-key -n M-j select-pane -L
bind-key -n M-l select-pane -R
# Swap panes
bind-key -n M-r swap-pane -D

# Scrolling
bind-key -n M-PPage copy-mode -u

# Colors & statusline
set -g status-bg black
set -g status-fg white
set -g status-interval 10
set -g status-left-length 30
set -g status-left '[#[default]'

set -g status-right-length 80
#set -g status-right '][#(. ~/.screenlayout/battery.sh)] [#(. ~/.screenlayout/brightness.sh)] [#(cut -d " " -f 1-3 /proc/loadavg)] [%H:%M#[default]]'
set -g status-right '[#(acpi -t | cut -f4,6 -d" ")] [#(acpi -b)] [%H:%M#[default]]'

set-window-option -g window-status-current-fg green
set-window-option -g window-status-current-bg black

set-window-option -g window-status-current-fg green
set-window-option -g window-status-current-bg black
set -g default-terminal "screen-256color"
set -g terminal-overrides 'xterm:colors=256'
set -g status-keys vi
set -g history-limit 10000

setw -g mode-keys vi

set -g utf8
set-window-option -g utf8 on

# disable mouse control by default - change 'off' to 'on' to enable by default.
setw -g mode-mouse on
setw -g mouse-utf8 on
if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-resize-pane on'
set-option -g mouse-select-pane on
if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-select-window on'

# toggle mouse mode to allow mouse copy/paste
# set mouse on with prefix m
bind m \
    set -g mode-mouse on \;\
    if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-resize-pane on' \;\
    set -g mouse-select-pane on \;\
    if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-select-window on' \;\
    display 'Mouse: ON'
# set mouse off with prefix M
bind M \
    set -g mode-mouse off \;\
    if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-resize-pane off' \;\
    set -g mouse-select-pane off \;\
    if-shell 'test "`tmux -V`" != "tmux 1.4"' 'set-option -g mouse-select-window off' \;\
    display 'Mouse: OFF'

# Open the current tab in a new window
bind-key -n M-= \
    new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
    swap-pane -s tmux-zoom.0 \;\
    select-window -t tmux-zoom
#przywrócenie zzoomowanego okna
bind-key -n M-- \
    last-window \;\
    swap-pane -s tmux-zoom.0 \;\
    kill-window -t tmux-zoom

bind-key -n M-0 select-window -t 0
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9


#bind-key Space choose-session

bind-key | split-window -h
bind-key - split-window -v

bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5

bind-key M-j resize-pane -D
bind-key M-k resize-pane -U
bind-key M-h resize-pane -L
bind-key M-l resize-pane -R

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Use Alt-vim keys without prefix key to switch panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# easily toggle synchronization (mnemonic: e is for echo)
bind e setw synchronize-panes

# No delay for escape key press
set -sg escape-time 0

# Reload tmux config
bind r source-file ~/.tmux.conf \; display-message 'Reloaded ~/.tmux.conf!'

# Set window notifications
setw -g monitor-activity on
set -g visual-activity off

set -g status-bg 'colour10'
set -g message-command-fg 'colour11'
set -g status-justify 'left'
set -g status-left-length '100'
set -g status 'on'
set -g pane-border-fg 'colour8'
set -g pane-active-border-fg 'colour7'
set -g message-bg 'colour7'
set -g status-right-length '100'
set -g status-right-attr 'none'
set -g message-fg 'colour11'
set -g message-command-bg 'colour7'
set -g status-attr 'none'
set -g status-utf8 'on'
set -g status-left-attr 'none'
setw -g window-status-fg 'colour7'
setw -g window-status-attr 'none'
setw -g window-status-activity-bg 'colour10'
setw -g window-status-activity-attr 'none'
setw -g window-status-activity-fg 'colour4'
setw -g window-status-separator ''
setw -g window-status-bg 'colour10'
set -g status-left '#[fg=colour0,bg=colour4,bold] #S #[fg=colour4,bg=colour10,nobold,nounderscore,noitalics]'
set -g status-right '#[fg=colour7,bg=colour10,nobold,nounderscore,noitalics]#[fg=colour11,bg=colour7] %Y-%m-%d  %H:%M #[fg=colour4,bg=colour7,nobold,nounderscore,noitalics]#[fg=colour0,bg=colour4] #h '
setw -g window-status-format '#[fg=colour7,bg=colour10] #I#F #[fg=colour7,bg=colour10] #W'
setw -g window-status-current-format '#[fg=colour10,bg=colour7,nobold,nounderscore,noitalics]#[fg=colour11,bg=colour7] #I#F #[fg=colour11,bg=colour7] #W #[fg=colour7,bg=colour10,nobold,nounderscore,noitalics]'

